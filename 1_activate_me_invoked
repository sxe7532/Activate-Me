import json
import hashlib
import hmac
import boto3
from botocore.exceptions import ClientError
import base64
from urllib import parse as urlparse
import time
import os
import datetime

helper_text = """
Wrong Syntax.

Correct Syntax: `/activate <email>`
"""

# Simple notification service ARN
SNS_TOPIC_ARN = 'arn:aws:sns:us-east-2:xxx:execute_activate_user'

SLACK_CHANNELS = ["xxx", "xxx", "xxx"]
date_format = '%Y-%m-%d'

def lambda_handler(event, context):
    
    request_body = event["body"]
    request_body_parsed = dict(urlparse.parse_qsl(request_body))
    
    channel_id = request_body_parsed["channel_id"]
    
    if channel_id in SLACK_CHANNELS:
        
        delivered_signature = event["headers"]['X-Slack-Signature']

        slack_request_timestamp = event["headers"]['X-Slack-Request-Timestamp']

        slack_signing_secret = "xxx"
        
        basestring = f"v0:{slack_request_timestamp}:{request_body}".encode('utf-8')
        
        slack_signing_secret = bytes(slack_signing_secret, 'utf-8')
        expected_signature = 'v0=' + hmac.new(slack_signing_secret, basestring, hashlib.sha256).hexdigest()
            
        current_time = time.time()
        slack_request_timestamp_asFloat = float(slack_request_timestamp)
        if (current_time - slack_request_timestamp_asFloat) > 300:
            response_text = "Message more than 5 minutes old"
            response_code = 412
        # Confirm that delivered signature is the same as the expected_signature
        elif hmac.compare_digest(expected_signature, delivered_signature):    
            try: 
                search_string = request_body_parsed["text"]
            except KeyError:
        	    # catches if no search string parameter is provided
                search_string = ""
            # hooray, signature strings match, the request came from Slack!
            
            if search_string == "":
                response_text = helper_text
                response_code = 200
            else: 
                try:
                    response_text = f":magic_wand: Starting activation for {search_string}..."
                    response_code = 200
                    
                    # Publish to the SNS topic
                    client = boto3.client('sns')
                    trigger = client.publish(TargetArn = SNS_TOPIC_ARN,Message=json.dumps({'default': json.dumps(request_body_parsed)}),MessageStructure='json')
                except ValueError:
                    response_text = helper_text
                    response_code = 200 
    else:
        response_text = ":warning: You must use `/activate` while inside an authorized channel."
        # Returning status code of 200 so that response text is presented to user
        response_code = 200

    return {
        'statusCode': response_code,
        'body': response_text
    }
    
